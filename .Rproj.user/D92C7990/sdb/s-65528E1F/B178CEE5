{
    "collab_server" : "",
    "contents" : "#' @title Read Data from Fatality Analysis Reporting System\n#'\n#' @description Read data from a csv file. The function also uses the tbl_df wrapper from dplyr to make sure\n#' the system won't print a lot of data to the screen\n#'\n#' @param filename the path to the data\n#' @return the wrapped dataset\n#' @importFrom readr read_csv\n#' @importFrom dplyr tbl_df\n#' @note The data has to be in csv format\n#' @export\nfars_read <- function(filename) {\n  if(!file.exists(filename))\n    stop(\"file '\", filename, \"' does not exist\")\n  data <- suppressMessages({\n    readr::read_csv(filename, progress = FALSE)\n  })\n  dplyr::tbl_df(data)\n}\n\n#' @title Make a file name\n#'\n#' @description Make a file name with speicified accident year\n#'\n#' @param year your desired accident year\n#' @return a character string of the name of the file\n#' @examples\n#' \\dontrun{make_filename(2013)}\n#' @export\nmake_filename <- function(year) {\n  year <- as.integer(year)\n  sprintf(\"accident_%d.csv.bz2\", year)\n}\n\n\n#' @title Read the year\n#'\n#' @description Read user specified year for the FARS data\n#'\n#' @param years a vector of your desired accident years\n#' @return a tibble with month and year\n#' @examples\n#' \\dontrun{fars_read_years(2013)}\n#' @import dplyr mutate\n#' @import dplyr select\n#' @export\nfars_read_years <- function(years) {\n  lapply(years, function(year) {\n    file <- make_filename(year)\n    tryCatch({\n      dat <- fars_read(file)\n      dplyr::mutate(dat, year = year) %>%\n        dplyr::select(MONTH, year)\n    }, error = function(e) {\n      warning(\"invalid year: \", year)\n      return(NULL)\n    })\n  })\n}\n\n\n#' @title Summarize the FARS data with specified accident year\n#'\n#' @description Summarize number of accidents across each month for the specified year\n#'\n#' @param year accident year\n#' @return a tibble showing number of accident by month\n#' @examples\n#' \\dontrun{fars_summarize_years(2013)}\n#' @import dplyr bind_rows\n#' @import dplyr group_by\n#' @import dplyr summarize\n#' @import tidyr spread\n#' @export\nfars_summarize_years <- function(years) {\n  dat_list <- fars_read_years(years)\n  dplyr::bind_rows(dat_list) %>%\n    dplyr::group_by(year, MONTH) %>%\n    dplyr::summarize(n = n()) %>%\n    tidyr::spread(year, n)\n}\n\n\n#' @title Mapping the accident for any given state\n#'\n#' @description Mapping the location of the accidents (based on latitude and longitude) with user speicifed state number\n#' and accident year\n#'\n#' @param state.num state code\n#' @param year accident year\n#'\n#' @return a map showing the location of the accidents\n#' @note the function will require \"maps\" package\n#' @examples\n#' \\dontrun{fars_map_state(10,2013)}\n#' @import maps map\n#' @import graphics points\n#' @import dplyr filter\n#' @export\nfars_map_state <- function(state.num, year) {\n  filename <- make_filename(year)\n  data <- fars_read(filename)\n  state.num <- as.integer(state.num)\n\n  if(!(state.num %in% unique(data$STATE)))\n    stop(\"invalid STATE number: \", state.num)\n  data.sub <- dplyr::filter(data, STATE == state.num)\n  if(nrow(data.sub) == 0L) {\n    message(\"no accidents to plot\")\n    return(invisible(NULL))\n  }\n  is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900\n  is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90\n  with(data.sub, {\n    maps::map(\"state\", ylim = range(LATITUDE, na.rm = TRUE),\n              xlim = range(LONGITUD, na.rm = TRUE))\n    graphics::points(LONGITUD, LATITUDE, pch = 46)\n  })\n}\n\n\n",
    "created" : 1506882744606.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4103433930",
    "id" : "B178CEE5",
    "lastKnownWriteTime" : 1507471790,
    "last_content_update" : 1507471790133,
    "path" : "~/MyFirstPackage/R/Week 2 assignment.R",
    "project_path" : "R/Week 2 assignment.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}